//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Gossiperl === 'undefined') {
  Gossiperl = {};
}
if (typeof Gossiperl.Client === 'undefined') {
  Gossiperl.Client = {};
}
if (typeof Gossiperl.Client.Thrift === 'undefined') {
  Gossiperl.Client.Thrift = {};
}
Gossiperl.Client.Thrift.DigestEnvelope = function(args) {
  this.payload_type = null;
  this.bin_payload = null;
  this.id = null;
  if (args) {
    if (args.payload_type !== undefined) {
      this.payload_type = args.payload_type;
    }
    if (args.bin_payload !== undefined) {
      this.bin_payload = args.bin_payload;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Gossiperl.Client.Thrift.DigestEnvelope.prototype = {};
Gossiperl.Client.Thrift.DigestEnvelope.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payload_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bin_payload = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestEnvelope.prototype.write = function(output) {
  output.writeStructBegin('DigestEnvelope');
  if (this.payload_type !== null && this.payload_type !== undefined) {
    output.writeFieldBegin('payload_type', Thrift.Type.STRING, 1);
    output.writeString(this.payload_type);
    output.writeFieldEnd();
  }
  if (this.bin_payload !== null && this.bin_payload !== undefined) {
    output.writeFieldBegin('bin_payload', Thrift.Type.STRING, 2);
    output.writeString(this.bin_payload);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestForwardedAck = function(args) {
  this.name = null;
  this.reply_id = null;
  this.secret = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.reply_id !== undefined) {
      this.reply_id = args.reply_id;
    }
    if (args.secret !== undefined) {
      this.secret = args.secret;
    }
  }
};
Gossiperl.Client.Thrift.DigestForwardedAck.prototype = {};
Gossiperl.Client.Thrift.DigestForwardedAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reply_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestForwardedAck.prototype.write = function(output) {
  output.writeStructBegin('DigestForwardedAck');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.reply_id !== null && this.reply_id !== undefined) {
    output.writeFieldBegin('reply_id', Thrift.Type.STRING, 2);
    output.writeString(this.reply_id);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 3);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestError = function(args) {
  this.name = null;
  this.heartbeat = null;
  this.error_code = null;
  this.error_entity = null;
  this.error_entity_name = null;
  this.error_message = null;
  this.reply_id = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.error_code !== undefined) {
      this.error_code = args.error_code;
    }
    if (args.error_entity !== undefined) {
      this.error_entity = args.error_entity;
    }
    if (args.error_entity_name !== undefined) {
      this.error_entity_name = args.error_entity_name;
    }
    if (args.error_message !== undefined) {
      this.error_message = args.error_message;
    }
    if (args.reply_id !== undefined) {
      this.reply_id = args.reply_id;
    }
  }
};
Gossiperl.Client.Thrift.DigestError.prototype = {};
Gossiperl.Client.Thrift.DigestError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.error_code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.error_entity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.error_entity_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.error_message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.reply_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestError.prototype.write = function(output) {
  output.writeStructBegin('DigestError');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 2);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.I32, 3);
    output.writeI32(this.error_code);
    output.writeFieldEnd();
  }
  if (this.error_entity !== null && this.error_entity !== undefined) {
    output.writeFieldBegin('error_entity', Thrift.Type.STRING, 4);
    output.writeString(this.error_entity);
    output.writeFieldEnd();
  }
  if (this.error_entity_name !== null && this.error_entity_name !== undefined) {
    output.writeFieldBegin('error_entity_name', Thrift.Type.STRING, 5);
    output.writeString(this.error_entity_name);
    output.writeFieldEnd();
  }
  if (this.error_message !== null && this.error_message !== undefined) {
    output.writeFieldBegin('error_message', Thrift.Type.STRING, 6);
    output.writeString(this.error_message);
    output.writeFieldEnd();
  }
  if (this.reply_id !== null && this.reply_id !== undefined) {
    output.writeFieldBegin('reply_id', Thrift.Type.STRING, 7);
    output.writeString(this.reply_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestExit = function(args) {
  this.name = null;
  this.heartbeat = null;
  this.secret = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.secret !== undefined) {
      this.secret = args.secret;
    }
  }
};
Gossiperl.Client.Thrift.DigestExit.prototype = {};
Gossiperl.Client.Thrift.DigestExit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestExit.prototype.write = function(output) {
  output.writeStructBegin('DigestExit');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 2);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 3);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestMember = function(args) {
  this.member_name = null;
  this.member_ip = null;
  this.member_port = null;
  this.member_heartbeat = null;
  if (args) {
    if (args.member_name !== undefined) {
      this.member_name = args.member_name;
    }
    if (args.member_ip !== undefined) {
      this.member_ip = args.member_ip;
    }
    if (args.member_port !== undefined) {
      this.member_port = args.member_port;
    }
    if (args.member_heartbeat !== undefined) {
      this.member_heartbeat = args.member_heartbeat;
    }
  }
};
Gossiperl.Client.Thrift.DigestMember.prototype = {};
Gossiperl.Client.Thrift.DigestMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.member_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.member_ip = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.member_port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.member_heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestMember.prototype.write = function(output) {
  output.writeStructBegin('DigestMember');
  if (this.member_name !== null && this.member_name !== undefined) {
    output.writeFieldBegin('member_name', Thrift.Type.STRING, 1);
    output.writeString(this.member_name);
    output.writeFieldEnd();
  }
  if (this.member_ip !== null && this.member_ip !== undefined) {
    output.writeFieldBegin('member_ip', Thrift.Type.STRING, 2);
    output.writeString(this.member_ip);
    output.writeFieldEnd();
  }
  if (this.member_port !== null && this.member_port !== undefined) {
    output.writeFieldBegin('member_port', Thrift.Type.I32, 3);
    output.writeI32(this.member_port);
    output.writeFieldEnd();
  }
  if (this.member_heartbeat !== null && this.member_heartbeat !== undefined) {
    output.writeFieldBegin('member_heartbeat', Thrift.Type.I64, 4);
    output.writeI64(this.member_heartbeat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscription = function(args) {
  this.event_type = null;
  this.member_name = null;
  this.origin = null;
  this.heartbeat = null;
  if (args) {
    if (args.event_type !== undefined) {
      this.event_type = args.event_type;
    }
    if (args.member_name !== undefined) {
      this.member_name = args.member_name;
    }
    if (args.origin !== undefined) {
      this.origin = args.origin;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
  }
};
Gossiperl.Client.Thrift.DigestSubscription.prototype = {};
Gossiperl.Client.Thrift.DigestSubscription.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.event_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.member_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.origin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscription.prototype.write = function(output) {
  output.writeStructBegin('DigestSubscription');
  if (this.event_type !== null && this.event_type !== undefined) {
    output.writeFieldBegin('event_type', Thrift.Type.STRING, 1);
    output.writeString(this.event_type);
    output.writeFieldEnd();
  }
  if (this.member_name !== null && this.member_name !== undefined) {
    output.writeFieldBegin('member_name', Thrift.Type.STRING, 2);
    output.writeString(this.member_name);
    output.writeFieldEnd();
  }
  if (this.origin !== null && this.origin !== undefined) {
    output.writeFieldBegin('origin', Thrift.Type.STRING, 3);
    output.writeString(this.origin);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 4);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.Digest = function(args) {
  this.name = null;
  this.port = null;
  this.heartbeat = null;
  this.id = null;
  this.secret = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.secret !== undefined) {
      this.secret = args.secret;
    }
  }
};
Gossiperl.Client.Thrift.Digest.prototype = {};
Gossiperl.Client.Thrift.Digest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.Digest.prototype.write = function(output) {
  output.writeStructBegin('Digest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 3);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 5);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestAck = function(args) {
  this.name = null;
  this.heartbeat = null;
  this.reply_id = null;
  this.membership = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.reply_id !== undefined) {
      this.reply_id = args.reply_id;
    }
    if (args.membership !== undefined) {
      this.membership = args.membership;
    }
  }
};
Gossiperl.Client.Thrift.DigestAck.prototype = {};
Gossiperl.Client.Thrift.DigestAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reply_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.membership = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Gossiperl.Client.Thrift.DigestMember();
          elem6.read(input);
          this.membership.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestAck.prototype.write = function(output) {
  output.writeStructBegin('DigestAck');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 2);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.reply_id !== null && this.reply_id !== undefined) {
    output.writeFieldBegin('reply_id', Thrift.Type.STRING, 3);
    output.writeString(this.reply_id);
    output.writeFieldEnd();
  }
  if (this.membership !== null && this.membership !== undefined) {
    output.writeFieldBegin('membership', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.membership.length);
    for (var iter7 in this.membership)
    {
      if (this.membership.hasOwnProperty(iter7))
      {
        iter7 = this.membership[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscriptions = function(args) {
  this.name = null;
  this.heartbeat = null;
  this.reply_id = null;
  this.subscriptions = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.reply_id !== undefined) {
      this.reply_id = args.reply_id;
    }
    if (args.subscriptions !== undefined) {
      this.subscriptions = args.subscriptions;
    }
  }
};
Gossiperl.Client.Thrift.DigestSubscriptions.prototype = {};
Gossiperl.Client.Thrift.DigestSubscriptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reply_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.subscriptions = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Gossiperl.Client.Thrift.DigestSubscription();
          elem14.read(input);
          this.subscriptions.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscriptions.prototype.write = function(output) {
  output.writeStructBegin('DigestSubscriptions');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 2);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.reply_id !== null && this.reply_id !== undefined) {
    output.writeFieldBegin('reply_id', Thrift.Type.STRING, 3);
    output.writeString(this.reply_id);
    output.writeFieldEnd();
  }
  if (this.subscriptions !== null && this.subscriptions !== undefined) {
    output.writeFieldBegin('subscriptions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.subscriptions.length);
    for (var iter15 in this.subscriptions)
    {
      if (this.subscriptions.hasOwnProperty(iter15))
      {
        iter15 = this.subscriptions[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscribe = function(args) {
  this.name = null;
  this.heartbeat = null;
  this.id = null;
  this.event_types = null;
  this.secret = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.event_types !== undefined) {
      this.event_types = args.event_types;
    }
    if (args.secret !== undefined) {
      this.secret = args.secret;
    }
  }
};
Gossiperl.Client.Thrift.DigestSubscribe.prototype = {};
Gossiperl.Client.Thrift.DigestSubscribe.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.event_types = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.event_types.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscribe.prototype.write = function(output) {
  output.writeStructBegin('DigestSubscribe');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 2);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.event_types !== null && this.event_types !== undefined) {
    output.writeFieldBegin('event_types', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.event_types.length);
    for (var iter23 in this.event_types)
    {
      if (this.event_types.hasOwnProperty(iter23))
      {
        iter23 = this.event_types[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 5);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestUnsubscribe = function(args) {
  this.name = null;
  this.heartbeat = null;
  this.id = null;
  this.event_types = null;
  this.secret = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.event_types !== undefined) {
      this.event_types = args.event_types;
    }
    if (args.secret !== undefined) {
      this.secret = args.secret;
    }
  }
};
Gossiperl.Client.Thrift.DigestUnsubscribe.prototype = {};
Gossiperl.Client.Thrift.DigestUnsubscribe.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.event_types = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString().value;
          this.event_types.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestUnsubscribe.prototype.write = function(output) {
  output.writeStructBegin('DigestUnsubscribe');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 2);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.event_types !== null && this.event_types !== undefined) {
    output.writeFieldBegin('event_types', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.event_types.length);
    for (var iter31 in this.event_types)
    {
      if (this.event_types.hasOwnProperty(iter31))
      {
        iter31 = this.event_types[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 5);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscribeAck = function(args) {
  this.heartbeat = null;
  this.reply_id = null;
  this.event_types = null;
  if (args) {
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.reply_id !== undefined) {
      this.reply_id = args.reply_id;
    }
    if (args.event_types !== undefined) {
      this.event_types = args.event_types;
    }
  }
};
Gossiperl.Client.Thrift.DigestSubscribeAck.prototype = {};
Gossiperl.Client.Thrift.DigestSubscribeAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reply_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.event_types = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString().value;
          this.event_types.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestSubscribeAck.prototype.write = function(output) {
  output.writeStructBegin('DigestSubscribeAck');
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 1);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.reply_id !== null && this.reply_id !== undefined) {
    output.writeFieldBegin('reply_id', Thrift.Type.STRING, 2);
    output.writeString(this.reply_id);
    output.writeFieldEnd();
  }
  if (this.event_types !== null && this.event_types !== undefined) {
    output.writeFieldBegin('event_types', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.event_types.length);
    for (var iter39 in this.event_types)
    {
      if (this.event_types.hasOwnProperty(iter39))
      {
        iter39 = this.event_types[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestUnsubscribeAck = function(args) {
  this.heartbeat = null;
  this.reply_id = null;
  this.event_types = null;
  if (args) {
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
    if (args.reply_id !== undefined) {
      this.reply_id = args.reply_id;
    }
    if (args.event_types !== undefined) {
      this.event_types = args.event_types;
    }
  }
};
Gossiperl.Client.Thrift.DigestUnsubscribeAck.prototype = {};
Gossiperl.Client.Thrift.DigestUnsubscribeAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reply_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.event_types = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString().value;
          this.event_types.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestUnsubscribeAck.prototype.write = function(output) {
  output.writeStructBegin('DigestUnsubscribeAck');
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 1);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  if (this.reply_id !== null && this.reply_id !== undefined) {
    output.writeFieldBegin('reply_id', Thrift.Type.STRING, 2);
    output.writeString(this.reply_id);
    output.writeFieldEnd();
  }
  if (this.event_types !== null && this.event_types !== undefined) {
    output.writeFieldBegin('event_types', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.event_types.length);
    for (var iter47 in this.event_types)
    {
      if (this.event_types.hasOwnProperty(iter47))
      {
        iter47 = this.event_types[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestEvent = function(args) {
  this.event_type = null;
  this.event_object = null;
  this.heartbeat = null;
  if (args) {
    if (args.event_type !== undefined) {
      this.event_type = args.event_type;
    }
    if (args.event_object !== undefined) {
      this.event_object = args.event_object;
    }
    if (args.heartbeat !== undefined) {
      this.heartbeat = args.heartbeat;
    }
  }
};
Gossiperl.Client.Thrift.DigestEvent.prototype = {};
Gossiperl.Client.Thrift.DigestEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.event_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.event_object = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.heartbeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gossiperl.Client.Thrift.DigestEvent.prototype.write = function(output) {
  output.writeStructBegin('DigestEvent');
  if (this.event_type !== null && this.event_type !== undefined) {
    output.writeFieldBegin('event_type', Thrift.Type.STRING, 1);
    output.writeString(this.event_type);
    output.writeFieldEnd();
  }
  if (this.event_object !== null && this.event_object !== undefined) {
    output.writeFieldBegin('event_object', Thrift.Type.STRING, 2);
    output.writeString(this.event_object);
    output.writeFieldEnd();
  }
  if (this.heartbeat !== null && this.heartbeat !== undefined) {
    output.writeFieldBegin('heartbeat', Thrift.Type.I64, 3);
    output.writeI64(this.heartbeat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

